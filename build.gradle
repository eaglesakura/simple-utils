/**
 * 1.0.0   : release
 * 1.0.1   : add Holder
 * 1.0.3   : add Disposable / mod IOUtil.close
 * 1.0.4   : add math package
 * 1.0.5   : 細かい修正
 * 1.0.6   : add MRT
 * 1.0.7   : 細かい機能追加
 * 1.1.x   : 自動デプロイに移行
 * 1.1.x   : リフレクション用Utilを追加
 */
def ARTIFACT_VERSION = "1.1"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        jcenter()
    }
}

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    jcenter()
}
apply plugin: 'java'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        compile project(':eglibrary:simple-logger')
    } else {
        compile 'com.eaglesakura:simple-logger:1.+'
    }
    testCompile 'junit:junit:4.12'
}

apply plugin: 'java'

sourceCompatibility = 1.7
targetCompatibility = 1.7

apply plugin: 'maven'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = "UTF-8"
    project.configure(options) {
        memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        charSet = "UTF-8"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2016'
        packaging 'jar'
        licenses {
            license {
                name 'MIT License'
                url "https://raw.githubusercontent.com/eaglesakura/${ARTIFACT_NAME}/master/LICENSE.txt"
            }
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".0"
    }
}

/**
 * Mavenの格納先を確定する
 */
File getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
